#ifndef _A_
#define _A_

//#include <assert.h>
#include <stddef.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <stdint.h>
#include <stdarg.h>
#include <ctype.h>
#include <libgen.h>
#include <unistd.h>

FILE *popen(const char *command, const char *type);
int   pclose(FILE*);

/// A-type runtime
typedef void                none;
typedef signed char         i8;
typedef short               i16;
typedef int                 i32;
typedef long long           i64;
typedef unsigned char       u8;
typedef unsigned short      u16;
typedef unsigned int        u32;
typedef unsigned long long  u64;
typedef long long           num;
typedef unsigned int        bool;
typedef float               f32;
typedef double              f64;
typedef long double         f128;
typedef double              real;    /// real enough
typedef void*               handle;
typedef char*               cstr;
typedef const char*         symbol;
typedef const char*         cereal;
typedef num                 sz;
typedef struct A_f*         AType;
typedef struct type_member_t* Member;
typedef struct A*           object; /// generic alias to describe base type; emitted with meta types
typedef struct meta_t {
    num             count;
    AType           meta_0, meta_1, meta_2, meta_3, 
                    meta_4, meta_5, meta_6, meta_7;
} meta_t;

typedef bool(*global_init_fn)();

#define true                (bool)1
#define false               (bool)0
#define stringify(x)        #x
#define null                ((void*)0)
#define FNV_PRIME           0x100000001b3
#define OFFSET_BASIS        0xcbf29ce484222325

/// our A-type classes have many types of methods
/// constructor, i[nstance]-method, s[tatic]-method, operator (these are enumerable!), and index.  we index by 1 argument only in C but we may allow for more in silver
enum A_TYPE {
    A_TYPE_NONE      = 0,
    A_TYPE_PROP      = 1,
    A_TYPE_PRIV      = 2,
    A_TYPE_INTERN    = 4,
    A_TYPE_IMETHOD   = 8,
    A_TYPE_SMETHOD   = 16,
    A_TYPE_CONSTRUCT = 32,
    A_TYPE_OPERATOR  = 64,
    A_TYPE_CAST      = 128,
    A_TYPE_INDEX     = 256,
    A_TYPE_ENUMV     = 512
};

enum A_TRAIT {
    A_TRAIT_PRIMITIVE = 1,
    A_TRAIT_INTEGRAL  = 2,
    A_TRAIT_REALISTIC = 4,
    A_TRAIT_ENUM      = 8,
    A_TRAIT_ALIAS     = 16,
    A_TRAIT_ABSTRACT  = 32
};

#define   enum_value_DECL(E, N)             E##_##N,
#define   enum_value_IMPL(E, N) \
    E##_type.members[E## _type.member_count].name     = #N; \
    E##_type.members[E## _type.member_count].offset   = E##_##N;\
    E##_type.members[E## _type.member_count].type     = &i32_type; \
    E##_type.members[E## _type.member_count].member_type = A_TYPE_ENUMV; \
    E##_type.member_count++;
#define   enum_value(X,Y, N)                enum_value_##Y(X, N)





/// we do not want to resolve types at startup by stringifying them
/// this results in a more compact binary and quicker runtime
/// it also means our primitives can work, too since they have the _type identifier exported member
#define EXPAND_ARGS_0()                         0
#define EXPAND_ARGS_1(a)                        1, &a##_type
#define EXPAND_ARGS_2(a, b)                     2, &a##_type, &b##_type
#define EXPAND_ARGS_3(a, b, c)                  3, &a##_type, &b##_type, &c##_type
#define EXPAND_ARGS_4(a, b, c, d)               4, &a##_type, &b##_type, &c##_type, &d##_type
#define EXPAND_ARGS_5(a, b, c, d, e)            5, &a##_type, &b##_type, &c##_type, &d##_type, &e##_type
#define EXPAND_ARGS_6(a, b, c, d, e, f)         6, &a##_type, &b##_type, &c##_type, &d##_type, &e##_type, &f##_type
#define EXPAND_ARGS_7(a, b, c, d, e, f, g)      7, &a##_type, &b##_type, &c##_type, &d##_type, &e##_type, &f##_type, &g##_type
#define EXPAND_ARGS_8(a, b, c, d, e, f, g, h)   8, &a##_type, &b##_type, &c##_type, &d##_type, &e##_type, &f##_type, &g##_type, &h##_type
#define COUNT_ARGS_IMPL(_1, _2, _3, _4, _5, _6, _7, _8, N, ...) N

#define COUNT_ARGS(...)             COUNT_ARGS_IMPL(__VA_ARGS__, 8, 7, 6, 5, 4, 3, 2, 1)
#define valloc(T, N)                ((A)A_alloc(typeid(T), N, false))
#define new(T)                      ((A)A_initialize(A_alloc(typeid(T), 1, true)))
#define alloc(T)                    ((A)A_alloc(typeid(T), 1, false))
#define ftable(TYPE, INSTANCE)      ((TYPE##_f*)((A)INSTANCE)[-1].type)
#define isa(INSTANCE)               ((struct A_f*)((struct A*)INSTANCE - 1)->type)
#define inherits(left, type)        A_inherits(left, typeid(type))

#define ftableI(I)                  ((__typeof__((I)->f)) ((A)(I))[-1].type)

/// calling methods
/// none of these set memory in-instance for the type info.
/// thats located on the A-object.
/// the type signature though, we put on the 'end' of the struct.  this memory is not valid
#define invoke(T,N,...)             T##_type.N(__VA_ARGS__)
#define M(I,N,...)                  ftableI(I) -> N(I, ##__VA_ARGS__)
  
/// indexing is functionality of I [ A1, A2, A... ] -> R
#define idx_1(I,T1,V1)              M(I, index ##_## T1, V1)
#define idx_2(I,T1,T2,V1,V2)        M(I, index ##_## T1 ##_## T2, V1, V2)
#define idx(I,V1)                   M(I, index ##_## num, V1)

/// our casts are polymorphic
#define cast(I,T)                   ftableI(I) -> cast_##T(I)

/// generic is from instance type, which we only need to store the args for, no other tables
#define meta_t(I,IDX)               isa(I) -> meta.meta_##IDX

#define ctr(T,WITH,...)             A_initialize(T##_type.with_##WITH((A)A_alloc(typeid(T), 1, true), ## __VA_ARGS__))
#define ctr1(T,WITH,...)            A_initialize(T##_type.with_##WITH((A)A_alloc(typeid(T), 1, true), ## __VA_ARGS__))
#define alloc_ctr(T,WITH,...)       A_initialize(T##_type.with_##WITH((A)A_alloc(typeid(T), 1, false), ## __VA_ARGS__))

#define str(CSTR)                   ctr1(string, cstr, (cstr)(CSTR), -1)

#define operator(I,OP,...)          ftableI(I) -> operator_##OP(I, ##__VA_ARGS__)
#define emit_types(...)             EXPAND_ARGS(__VA_ARGS__)
#define combine_tokens_(A, B)       A##B
#define combine_tokens(A, B)        combine_tokens_(A, B)
#define EXPAND_ARGS(...)            EXPAND_ARGS_HELPER(COUNT_ARGS(__VA_ARGS__), __VA_ARGS__)
#define EXPAND_ARGS_HELPER(N, ...)  combine_tokens(EXPAND_ARGS_, N)(__VA_ARGS__)


//#define EXPAND_ARGS2_0()                       
#define EXPAND_ARGS2_1(a)                        a
#define EXPAND_ARGS2_2(a, b)                     a##_##b
#define EXPAND_ARGS2_3(a, b, c)                  a##_##b##_##c
#define EXPAND_ARGS2_4(a, b, c, d)               a##_##b##_##c##_##d
#define EXPAND_ARGS2_5(a, b, c, d, e)            a##_##b##_##c##_##d##_e
#define EXPAND_ARGS2_6(a, b, c, d, e, f)         a##_##b##_##c##_##d##_e##_##f
#define EXPAND_ARGS2_7(a, b, c, d, e, f, g)      a##_##b##_##c##_##d##_e##_##f##_##g
#define EXPAND_ARGS2_8(a, b, c, d, e, f, g, h)   a##_##b##_##c##_##d##_e##_##f##_##g##_##h

#define emit_types2(...)            EXPAND_ARGS2(__VA_ARGS__)
#define EXPAND_ARGS2(...)            EXPAND_ARGS_HELPER2(COUNT_ARGS(__VA_ARGS__), __VA_ARGS__)
#define EXPAND_ARGS_HELPER2(N, ...)  combine_tokens(EXPAND_ARGS2_, N)(__VA_ARGS__)




#define   i_intern_INST(    X,Y, R, N, ...)         R N;
#define   i_intern_TYPE(    X,Y, R, N, ...)
#define   i_intern_BASE(    X,Y, R, N, ...)
#define   i_intern_INIT(    X,Y, R, N, ...)
#define   i_intern_PROTO(   X,Y, R, N, ...)    
#define   i_intern_METHOD(  X,Y, R, N, ...)    
#define   i_intern(         X,Y, R, N, ...)         i_intern_##Y(X,Y,R,N, ## __VA_ARGS__)

#define   i_private_INST(   X,Y, R, N, ...)         R N;
#define   i_private_TYPE(   X,Y, R, N, ...)
#define   i_private_BASE(   X,Y, R, N, ...)
#define   i_private_INIT(   X,Y, R, N, ...) \
    X##_type.members[X##_type.member_count].name     = #N; \
    X##_type.members[X##_type.member_count].offset   = offsetof(struct X, N); \
    X##_type.members[X##_type.member_count].type     = &R##_type; \
    X##_type.members[X##_type.member_count].member_type = A_TYPE_PRIV; \
    X##_type.member_count++;
#define   i_private_PROTO(  X,Y, R, N, ...)    
#define   i_private_METHOD( X,Y, R, N, ...)    
#define   i_private(        X,Y, R, N, ...)          i_private_##Y(X,Y,R,N, ## __VA_ARGS__)

#define   i_public_INST(    X,Y, R, N, ...)         R N;
#define   i_public_TYPE(    X,Y, R, N, ...)      
#define   i_public_CTR_MEMBER(X,Y, R, N, ...)
#define   i_public_BASE(    X,Y, R, N, ...)
#define   i_public_INIT(    X,Y, R, N, ...) \
    X##_type.members[X##_type.member_count].name     = #N; \
    X##_type.members[X##_type.member_count].offset   = offsetof(struct X, N); \
    X##_type.members[X##_type.member_count].type     = &R##_type; \
    X##_type.members[X##_type.member_count].member_type = A_TYPE_PROP; \
    X##_type.member_count++;
#define   i_public_PROTO(   X,Y, R, N, ...)  
#define   i_public_METHOD(  X,Y, R, N, ...)   
#define   i_public(         X,Y, R, N, ...)         i_public_##Y(X,Y, R, N, __VA_ARGS__)

#define   s_method_INST(    X,Y, R, N, ...)
#define   s_method_TYPE(    X,Y, R, N, ...)         R (*N)(__VA_ARGS__);
#define   s_method_BASE(    X,Y, R, N, ...)
#define   s_method_INIT(    X,Y, R, N, ...) \
    X##_type . N = & X## _ ## N; \
    X##_type.members[X##_type.member_count].name    = #N; \
    X##_type.members[X##_type.member_count].args    = (meta_t) { emit_types(__VA_ARGS__) }; \
    X##_type.members[X##_type.member_count].type    = &R##_type; \
    X##_type.members[X##_type.member_count].offset  = offsetof(X##_f, N); \
    X##_type.members[X##_type.member_count].member_type = A_TYPE_SMETHOD; \
    X##_type.member_count++;   
#define   s_method_PROTO(   X,Y, R, N, ...)
#define   s_method_METHOD(  X,Y, R, N, ...)         R (*N)(__VA_ARGS__);
#define   s_method(         X,Y, R, N, ...)         s_method_##Y(X,Y, R, N, ##__VA_ARGS__)

#define   i_method_INST(    X,Y, R, N, ...)
#define   i_method_TYPE(    X,Y, R, N, ...)         R (*N)(__VA_ARGS__);
#define   i_method_INIT(    X,Y, R, N, ...) \
    X##_type . N = & X## _ ## N; \
    X##_type.members[X##_type.member_count].name    = #N; \
    X##_type.members[X##_type.member_count].args    = (meta_t) { emit_types(X, ##__VA_ARGS__) }; \
    X##_type.members[X##_type.member_count].type    = &R##_type; \
    X##_type.members[X##_type.member_count].offset  = offsetof(X##_f, N); \
    X##_type.members[X##_type.member_count].member_type = A_TYPE_IMETHOD; \
    X##_type.member_count++;
#define   i_method_BASE(X,Y, R, N, ...) 
#define   i_method_PROTO(X,Y, R, N, ...)
#define   i_method_METHOD(X,Y, R, N, ...)           R (*N)(__VA_ARGS__);
#define   i_method(X,Y, R, N, ...)                  i_method_##Y(X,Y, R, N, X, ##__VA_ARGS__)

#define   i_operator_INST(X,Y, R, N, ARG)
#define   i_operator_TYPE(X,Y, R, N, ARG)           R (*operator_ ## N)(X, ARG);
#define   i_operator_BASE(X,Y, R, N, ARG)
#define   i_operator_INIT(X,Y, R, N, ARG) \
    X##_type  . operator_##N = & X## _operator_ ## N; \
    X##_type.members[X##_type.member_count].name    = stringify(combine_tokens(operator_, N)); \
    X##_type.members[X##_type.member_count].args    = (meta_t) { emit_types(X, ARG) }; \
    X##_type.members[X##_type.member_count].type    = &R##_type; \
    X##_type.members[X##_type.member_count].offset  = offsetof(X##_f, operator_##N); \
    X##_type.members[X##_type.member_count].member_type = A_TYPE_OPERATOR; \
    X##_type.members[X##_type.member_count].operator_type = OPType_ ## N; \
    X##_type.member_count++; 
#define   i_operator_PROTO(X,Y, R, N, ARG)
#define   i_operator_METHOD(X,Y, R, N, ARG)
#define   i_operator(X,Y, R, N, ARG)          i_operator_##Y(X,Y, R, N, ARG)

#define   i_cast_INST(X,Y, R)
#define   i_cast_TYPE(X,Y, R)                   R (*cast_##R)(X);
#define   i_cast_BASE(X,Y, R)
#define   i_cast_INIT(X,Y, R) \
    X##_type.cast_##R = & X##_cast_##R; \
    X##_type.members[X##_type.member_count].name    = stringify(combine_tokens(cast_, R)); \
    X##_type.members[X##_type.member_count].args    = (meta_t) { emit_types(X) }; \
    X##_type.members[X##_type.member_count].type    = &R##_type; \
    X##_type.members[X##_type.member_count].offset  = offsetof(X##_f, cast_##R); \
    X##_type.members[X##_type.member_count].member_type = A_TYPE_CAST; \
    X##_type.member_count++;  
#define   i_cast_PROTO(X,Y, R)
#define   i_cast_METHOD(X,Y, R)                 R (*cast_##R)(X);
#define   i_cast(X,Y, R)                      i_cast_##Y(X,Y, R)


#define   i_index_INST(X,Y,R, ...)
#define   i_index_TYPE(X,Y,R, ...)        R (*emit_types2(index, __VA_ARGS__))(X, ##__VA_ARGS__);
#define   i_index_PRIM(X,Y,R, ...)        R (*emit_types2(index, __VA_ARGS__))(X, ##__VA_ARGS__);
#define   i_index_BASE(X,Y,R, ...)
#define   i_index_INIT(X,Y,R, ...) \
    X##_type.emit_types2(index, __VA_ARGS__) = & emit_types2(X ## _index, __VA_ARGS__); \
    X##_type.members[X##_type.member_count].name        = stringify(emit_types2(index, __VA_ARGS__)); \
    X##_type.members[X##_type.member_count].args        = (meta_t) { emit_types(__VA_ARGS__) }; \
    X##_type.members[X##_type.member_count].type        = &R##_type; \
    X##_type.members[X##_type.member_count].offset      = offsetof(X##_f, emit_types2(index, __VA_ARGS__)); \
    X##_type.members[X##_type.member_count].member_type = A_TYPE_INDEX; \
    X##_type.member_count++;  
#define i_index_PROTO(X,Y, R, ...)
#define i_index_METHOD(X,Y, R, ...)       R (*emit_types2(index, __VA_ARGS__))(X, ##__VA_ARGS__);
#define i_index(X,Y, R, ...)            i_index_##Y(X,Y, R, ##__VA_ARGS__)

/// construct PRIM swaps X with Y for the instance
#define   i_construct_INST(X,Y,ARG, ...)
#define   i_construct_TYPE(X,Y,ARG, ...)        X (*with_##ARG)(X, ARG, ##__VA_ARGS__);
#define   i_construct_PRIM(X,Y,ARG, ...)        X (*with_##ARG)(X, ARG, ##__VA_ARGS__);
#define   i_construct_BASE(X,Y,ARG, ...)
#define   i_construct_INIT(X,Y,ARG, ...) \
    X##_type.with_##ARG = & X##_with_##ARG; \
    X##_type.members[X##_type.member_count].name        = #ARG; \
    X##_type.members[X##_type.member_count].args        = (meta_t) { emit_types(ARG, ##__VA_ARGS__) }; \
    X##_type.members[X##_type.member_count].type        = &ARG##_type; \
    X##_type.members[X##_type.member_count].offset      = offsetof(X##_f, with_##ARG); \
    X##_type.members[X##_type.member_count].member_type = A_TYPE_CONSTRUCT; \
    X##_type.member_count++;  
#define i_construct_PROTO(X,Y, ARG, ...)
#define i_construct_METHOD(X,Y, ARG, ...)       X (*with_##ARG)(X, ARG, ##__VA_ARGS__);
#define i_construct(X,Y, ARG, ...)            i_construct_##Y(X,Y, ARG, ##__VA_ARGS__)

#define i_method_vargs_INST(X,Y, R, N, ...)
#define i_method_vargs_TYPE(X,Y, R, N, ...)     R (*N)(X, __VA_ARGS__, ...);
#define i_method_vargs_INIT(X,Y, R, N, ...)     i_method_INIT(X,Y, R, N, __VA_ARGS__)  
#define i_method_vargs_BASE(X,Y, R, N, ...)
#define i_method_vargs_PROTO(X,Y, R, N, ...)
#define i_method_vargs_METHOD(X,Y, R, N, ...)   R (*N)(__VA_ARGS__, ...);
#define i_method_vargs(X,Y, R, N, ...)        i_method_vargs_##Y(X,Y, R, N, __VA_ARGS__)

#define s_method_vargs_INST(X,Y, R, N, ...)
#define s_method_vargs_TYPE(X,Y, R, N, ...)     R (*N)(__VA_ARGS__, ...);
#define s_method_vargs_INIT(X,Y, R, N, ...)     s_method_INIT(X,Y, R, N, ##__VA_ARGS__)
#define s_method_vargs_BASE(X,Y, R, N, ...)  
#define s_method_vargs_PROTO(X,Y, R, N, ...)
#define s_method_vargs_METHOD(X,Y, R, N, ...)   R (*N)(__VA_ARGS__, ...);
#define s_method_vargs(X,Y, R, N, ...)          s_method_vargs_##Y(X,Y, R, N, ##__VA_ARGS__)

#define implement_INST(X,Y, R, N, ...)
#define implement_TYPE(X,Y, R, N, ...)      
#define implement_INIT(X,Y, R, N, ...)
#define implement_BASE(X,Y, R, N, ...)
#define implement_PROTO(X,Y, R, N, ...)
#define implement_METHOD(X,Y, R, N, ...)
#define implement(X,Y, R, N, ...)             implement_##Y(X,Y, R, N, __VA_ARGS__)

#define i_override_m_INST(X,Y, R, N)
#define i_override_m_TYPE(X,Y, R, N)        
#define i_override_m_INIT(X,Y, R, N)            X##_type . N = & X## _ ## N;
#define i_override_m_BASE(X,Y, R, N)
#define i_override_m_PROTO(X,Y, R, N)
#define i_override_m_METHOD(X,Y, R, N)
#define i_override_m(X,Y, R, N)               i_override_m_##Y(X,Y, R, N)

#define i_override_cast_INST(X,Y, R)
#define i_override_cast_TYPE(X,Y, R)        
#define i_override_cast_INIT(X,Y, R)            X##_type . cast_##R = & X##_cast_##R;
#define i_override_cast_BASE(X,Y, R)
#define i_override_cast_PROTO(X,Y, R)
#define i_override_cast_METHOD(X,Y, R)
#define i_override_cast(X,Y, R)               i_override_cast_##Y(X,Y, R)

#define i_override_ctr_INST(X,Y,   ARG)
#define i_override_ctr_TYPE(X,Y,   ARG)
#define i_override_ctr_INIT(X,Y,   ARG)         X##_type.with_##ARG = & X##_with_##ARG;
#define i_override_ctr_BASE(X,Y,   ARG)         
#define i_override_ctr_PROTO(X,Y,  ARG)
#define i_override_ctr_METHOD(X,Y, ARG)
#define i_override_ctr(X,Y, ARG)              i_override_ctr_##Y(X,Y, ARG)

typedef struct method_t {
    struct array*   atypes;
    struct A_f*     rtype;
    void*           address;
    void*           ffi_cif;  /// ffi-calling info
    void*           ffi_args; /// ffi-data types for args
} method_t;

typedef struct prop_t {
    void*           address;
} prop_t;

/// methods and properties may use this
/// we may not want to expose members; they will be zero if that is the case
typedef struct type_member_t {
    char*           name;
    AType           type;
    num             offset;
    enum A_TYPE     member_type;
    int             operator_type;
    meta_t          args;
    union {
        method_t*   method;
        prop_t*     prop;
    };
} type_member_t;

/// A type members with base-type
/// an alias would also set a meta type, in order to add real function
/// so an alias of array may be called array_int from array and its meta is set to int
/// the last part is useful for runtime
#define A_f_members(B) \
    struct B ## _f* parent_type; \
    char*           name; \
    num             size; \
    num             member_count; \
    type_member_t*  members; \
    u64             traits; \
    AType           src; \
    meta_t          meta; \
    void*           arb;

#define declare_inst( X ) \
    _Pragma("pack(push, 1)") \
    typedef struct X { \
        X##_schema (X, INST) \
        struct X##_f* f; \
    } *X; \
    _Pragma("pack(pop)") \

#define declare_mod_inst( X,Y ) \
    _Pragma("pack(push, 1)") \
    typedef struct X { \
        Y##_schema (Y, INST) \
        X##_schema (X, INST) \
        struct X##_f* f; \
    } *X; \
    _Pragma("pack(pop)") \

#define declare_base( X ) \
    declare_inst(X) \
    typedef struct X##_f { \
        A_f_members(A) \
        X##_schema (X, TYPE) \
    } X##_f; \
    extern X##_f X##_type;

/// does not need the list of all of the types, just the name we are assigning for its alias
#define declare_meta(SRC, AA ) \
    typedef struct SRC* AA; \
    typedef struct AA##_f { \
        A_f_members(SRC) \
        A_schema     (A,  METHOD) \
        SRC##_schema (AA, TYPE) \
    } AA##_f, *AA##_t; \
    extern AA##_f AA##_type;

/// declare object and type with f-table from meta-def
#define declare_abstract( X ) \
    typedef struct A* X; \
    typedef struct X##_f { \
        A_f_members(A) \
        A_schema(A, METHOD) \
        X##_schema(X, TYPE) \
    } X##_f, *X##_t; \
    extern X##_f X##_type;

/// declare object and type with f-table from meta-def
#define declare_primitive( X, Y ) \
    typedef struct X##_f { \
        A_f_members(A) \
        A_schema(A, METHOD) \
        X##_schema(X, PRIM) \
    } X##_f, *X##_t; \
    extern X##_f X##_type;

#define declare_enum( E ) \
    typedef enum E { \
        E##_schema(E, DECL) \
        E##_ENUM_COUNT \
    } E; \
    typedef struct E##_f { \
        A_f_members(A) \
        A_schema   (E, METHOD) \
    } E##_f, *E##_t; \
    extern E##_f   E##_type;

void A_push_type(AType type);

/// declare object and type with f-table from meta-def
#define declare_class(X) \
    declare_inst(X) \
    typedef struct X##_f { \
        A_f_members(A) \
        A_schema   (A, METHOD) \
        X##_schema (X, TYPE) \
    } X##_f, *X##_t; \
    extern X##_f  X##_type;

void        A_lazy_init(global_init_fn fn);

#define define_enum( E ) \
    E ## _f   E ## _type; \
    static __attribute__((constructor)) bool global_##E() { \
        E ## _f* type_ref = &E ## _type; \
        A_f* base_ref     = &A_type; \
        if ((AType)type_ref != (AType)base_ref && base_ref->size == 0) { \
            A_lazy_init((global_init_fn)&global_##E); \
            return false; \
        } else { \
            memcpy(type_ref, base_ref, sizeof(A_f)); \
            static type_member_t members[16 + E##_ENUM_COUNT + sizeof(E##_type) / sizeof(void*)]; \
            E##_type.parent_type = & A_type; \
            E##_type.name     = #E; \
            E##_type.size     = sizeof(enum E); \
            E##_type.members  = members; \
            E##_type.traits   = A_TRAIT_ENUM; \
            E##_type.arb      = primitive_ffi_arb(typeid(i32)); \
            E##_schema( E, IMPL ); \
            A_push_type(&E##_type); \
            return true; \
        } \
    }
/// we mod, instead of [calling it] subclass
/// a class can still implement a protocol (initialization check)
#define declare_mod(X,Y) \
    declare_mod_inst(X,Y) \
    typedef struct X##_f { \
        A_f_members(Y) \
        A_schema   (A, METHOD) \
        Y##_schema (Y, METHOD) \
        X##_schema (X, TYPE) \
    } X##_f, *X##_t; \
    extern X##_f   X##_type;

#define declare_proto(X) \
    declare_inst(X) \
    typedef struct X##_f { \
        A_f_members(A) \
        A_schema   (A, METHOD) \
        X##_schema (X, TYPE) \
    } X##_f, *X##_t; \
    extern X##_f  X##_type;

#define define_global_primitive(X,Y, TYPE_SZ, TRAIT) \
    _Pragma("pack(push, 1)") \
    A     X##_header; \
    X##_f X##_type; \
    _Pragma("pack(pop)") \
    static __attribute__((constructor)) bool global_##X() { \
        X##_f* type_ref = &X##_type; \
        Y##_f* base_ref = &Y##_type; \
        if ((AType)type_ref != (AType)base_ref && base_ref->name == null) { \
            A_lazy_init((global_init_fn)&global_##X); \
            return false; \
        } else { \
            assert(sizeof(Y##_f) >= sizeof(X##_f), "invalid sz"); \
            memcpy(type_ref, base_ref, sizeof(Y##_f)); \
            X## _type.parent_type = &Y##_type; \
            X## _type.name     = #X;        \
            X## _type.size     = TYPE_SZ;   \
            X## _type.traits   = TRAIT;     \
            X## _type.arb = primitive_ffi_arb(typeid(X)); \
            A_push_type(&X##_type);         \
            return true;                    \
        }                                   \
    }

#define define_global(X,Y, TYPE_SZ, TRAIT, META) \
    _Pragma("pack(push, 1)") \
    A     X##_header; \
    X##_f X##_type; \
    _Pragma("pack(pop)") \
    static __attribute__((constructor)) bool global_##X() { \
        X##_f* type_ref = &X##_type; \
        Y##_f* base_ref = &Y##_type; \
        if ((AType)type_ref != (AType)base_ref && base_ref->size == 0) { \
            A_lazy_init((global_init_fn)&global_##X); \
            return false; \
        } else { \
            memcpy(type_ref, base_ref, sizeof(Y##_f)); \
            static type_member_t members[16 + sizeof(X##_type) / sizeof(void*)]; \
            X## _type.parent_type = &Y##_type; \
            X## _type.name     = #X;        \
            X## _type.size     = TYPE_SZ;   \
            X## _type.members  = members;   \
            X## _type.traits   = TRAIT;     \
            META;                           \
            A_push_type(&X##_type);         \
            return true;                    \
        }                                   \
    }

/// primitives dont have construct/method support, but its abstract does
#define define_primitive(X, Y, traits) \
    define_global_primitive(X, Y, sizeof(X), traits | A_TRAIT_PRIMITIVE)

/// with abstracts we dont require ffi, so a pretty minimal global
#define define_abstract(X) \
    define_global(X, A, 0, A_TRAIT_ABSTRACT, \
        X##_type.arb = null; \
        X##_schema( X, INIT ) \
    )

void* primitive_ffi_arb(AType);

/// i hate going back to this one
/// but its a simple matter of it
/// emitting the entire member set
/// of the supers which we do not
/// want, those are copied
#define define_class(CLASS) \
    define_global(CLASS, A, sizeof(struct CLASS), 0, \
        CLASS##_type.arb = primitive_ffi_arb(typeid(cstr)); \
              A_schema( A,     BASE ) \
        CLASS##_schema( CLASS, INIT ) \
    )

#define define_mod(MOD, CLASS) \
    define_global(MOD, CLASS, sizeof(struct CLASS), 0, \
        CLASS##_type.arb = primitive_ffi_arb(typeid(cstr)); \
              A_schema(     A, BASE ) \
        CLASS##_schema( CLASS, BASE ) \
          MOD##_schema(   MOD, INIT ) \
    )

#define define_proto(X) \
    define_global(X, A, sizeof(struct X), 0, X##_schema(X, PROTO ))


/// alias let us meta describe things without adding any code.  just a bit of cloning of the function table.  which is definitely bloat
/// however we can reduce 
/// in this case, array accepts meta types and based on the instance's 
/// type it will use these to filter the list and throw assertions when 
/// an incompatible type is seen

/// so this introduces some new programming for us, in that our types are 
/// defined as optional meta's in series.  Its very useful to anyone who wants to
/// keep codesize down.  silver output can use pointers directly to the table when we cast

/// define_meta(array, ListOfNumerics, u8, u16, u32, u64, i8, i16, i32, i64)

#define define_meta(SRC_TYPE, ALIAS_TYPE, ...) \
    A ALIAS_TYPE##_header; \
    ALIAS_TYPE##_f ALIAS_TYPE##_type; \
    static __attribute__((constructor)) bool global_##ALIAS_TYPE() { \
        ALIAS_TYPE##_f* type_ref = &ALIAS_TYPE##_type; \
        SRC_TYPE##_f* src_ref = &SRC_TYPE##_type; \
        if (src_ref->size == 0) { \
            A_lazy_init((global_init_fn)&global_##ALIAS_TYPE); \
            return false; \
        } else { \
            memcpy(&ALIAS_TYPE##_type, &SRC_TYPE##_type, sizeof(SRC_TYPE##_f)); \
            ALIAS_TYPE##_type.name     = #ALIAS_TYPE; \
            ALIAS_TYPE##_type.src      = &SRC_TYPE##_type; \
            ALIAS_TYPE##_type.meta     = (meta_t) { emit_types(__VA_ARGS__) }; \
            ALIAS_TYPE##_type.traits   = A_TRAIT_ALIAS; \
            return true; \
        } \
    }

typedef struct string* string;

/// constructors get a type forwarded from the construct macro
#define A_schema(X,Y) \
    i_intern(X,Y, AType,     type) \
    i_intern(X,Y, num,       refs) \
    i_intern(X,Y, num,       ar_index) \
    i_intern(X,Y, struct A*, data) \
    i_intern(X,Y, num,       alloc) \
    i_intern(X,Y, num,       count) \
    i_intern(X,Y, struct A*, origin) \
    i_method(X,Y, none,      init) \
    i_method(X,Y, none,      destructor) \
    i_method(X,Y, i32,       compare,    X) \
    i_method(X,Y, u64,       hash) \
    i_method(X,Y, A,         copy, A) \
    i_cast(  X,Y, string) \
    i_cast(  X,Y, bool) \
    i_construct(X,Y, cereal, num)
declare_base(A)

#define typeid(X) ((struct A_f*)&X##_type)

#define numeric_schema(X,Y) \
    i_construct(X,Y, i8)  \
    i_construct(X,Y, i16) \
    i_construct(X,Y, i32) \
    i_construct(X,Y, i64) \
    i_construct(X,Y, u8)  \
    i_construct(X,Y, u16) \
    i_construct(X,Y, u32) \
    i_construct(X,Y, u64) \
    i_construct(X,Y, f32) \
    i_construct(X,Y, f64) \
    i_construct(X,Y, bool) \
    i_construct(X,Y, num)
declare_abstract(numeric)

#define string_like_schema(X,Y)
declare_abstract(string_like)

#define nil_schema(X,Y)
declare_abstract(nil)

#define raw_schema(X,Y)
declare_abstract(raw)

#define imported_schema(X,Y)
declare_abstract(imported)

/// our numeric primitives have their constructs defined
/// this is so we have a defined construction method for data conversion, we actually need it registered
/// we may optimize the need for it to be called in C99 output once working
#define i8_schema(X,Y)          numeric_schema(X,Y)
#define i16_schema(X,Y)         numeric_schema(X,Y)
#define i32_schema(X,Y)         numeric_schema(X,Y)
#define i64_schema(X,Y)         numeric_schema(X,Y)
#define u8_schema(X,Y)          numeric_schema(X,Y)
#define u16_schema(X,Y)         numeric_schema(X,Y)
#define u32_schema(X,Y)         numeric_schema(X,Y)
#define u64_schema(X,Y)         numeric_schema(X,Y)
#define f32_schema(X,Y)         numeric_schema(X,Y)
#define f64_schema(X,Y)         numeric_schema(X,Y)
#define f128_schema(X,Y)        numeric_schema(X,Y)
#define bool_schema(X,Y)        numeric_schema(X,Y)
#define num_schema(X,Y)         numeric_schema(X,Y)
#define sz_schema(X,Y)          numeric_schema(X,Y)
#define cstr_schema(X,Y)        string_like_schema(X,Y)
#define symbol_schema(X,Y)      string_like_schema(X,Y)
#define cereal_schema(X,Y)      string_like_schema(X,Y)
#define none_schema(X,Y)        nil_schema(X,Y)
#define raw_t_schema(X,Y)       raw_schema(X,Y)
#define handle_schema(X,Y)      raw_schema(X,Y)
#define AType_schema(X,Y)       raw_schema(X,Y)
#define Member_schema(X,Y)      raw_schema(X,Y)

/// meta gives us access to one token we can override with (F)
declare_primitive( i8,          numeric)
declare_primitive(i16,          numeric)
declare_primitive(i32,          numeric)
declare_primitive(i64,          numeric)
declare_primitive( u8,          numeric)
declare_primitive(u16,          numeric)
declare_primitive(u32,          numeric)
declare_primitive(u64,          numeric)
declare_primitive(f32,          numeric)
declare_primitive(f64,          numeric)
declare_primitive(f128,         numeric)
declare_primitive(cstr,         string_like)
declare_primitive(symbol,       string_like)
declare_primitive(cereal,       string_like)
declare_primitive(bool,       numeric)
declare_primitive(none,         nil)
declare_primitive(num,          numeric)
declare_primitive(sz,           numeric)
declare_primitive(raw_t,        raw)
declare_primitive(handle,       raw)
/// whatever we can 'name', we can handle as a type of any pointer primitive
declare_primitive(AType,        raw)
declare_primitive(Member,       raw)

/// doubly-linked item type, integrated key so we dont also need a 'field' type
#define item_schema(X,Y) \
    i_intern(X,Y, struct X*, next) \
    i_intern(X,Y, struct X*, prev) \
    i_intern(X,Y, A,         val) \
    i_intern(X,Y, A,         key) \
    i_override_m(X,Y, u64, hash) \
    i_construct(X,Y, symbol, A)
declare_class(item)

/// linked-list of elemental data
#define list_schema(X,Y) \
    i_intern(X,Y, item,      first) \
    i_intern(X,Y, item,      last)  \
    i_intern(X,Y, i64,       count) \
    i_method(X,Y, A,         pop) \
    i_method(X,Y, A,         push, A) \
    i_method(X,Y, num,       index_of_element, A) \
    i_method(X,Y, none,      remove, num) \
    i_method(X,Y, none,      remove_item, item) \
    i_method(X,Y, A,         get,  i32) \
    i_method(X,Y, num,       count)
declare_class(list)


/// array of elemental data
/// important to define the same operators here in silver definition of runtime
/// one has arguments (operator) and (cast) does not, thats always instance
/// we need different names for these.  they cannot both be considered 'operators'
/// we also need new data structure, so ops vs casts vs constructs vs methods
// += -= *= /= 
// ":", "+=", "-=", "*=", "/=", "|=",
// "&=", "^=", ">>=", "<<=", "%=", null);

typedef struct string* string;

#define OPType_schema(X,Y) \
    enum_value(X,Y, add) \
    enum_value(X,Y, sub) \
    enum_value(X,Y, mul) \
    enum_value(X,Y, div) \
    enum_value(X,Y, or) \
    enum_value(X,Y, and) \
    enum_value(X,Y, xor) \
    enum_value(X,Y, right) \
    enum_value(X,Y, left) \
    enum_value(X,Y, assign) \
    enum_value(X,Y, assign_add) \
    enum_value(X,Y, assign_sub) \
    enum_value(X,Y, assign_mul) \
    enum_value(X,Y, assign_div) \
    enum_value(X,Y, assign_or) \
    enum_value(X,Y, assign_and) \
    enum_value(X,Y, assign_xor) \
    enum_value(X,Y, assign_right) \
    enum_value(X,Y, assign_left) \
    enum_value(X,Y, mod_assign)
declare_enum(OPType)

#define path_schema(X,Y) \
    i_intern    (X,Y, cstr,   chars) \
    i_method    (X,Y, bool,   exists) \
    i_method    (X,Y, bool,   make_dir) \
    i_method    (X,Y, bool,   is_empty) \
    i_method    (X,Y, bool,   is_dir) \
    i_method    (X,Y, path,   directory) \
    i_method    (X,Y, string, stem) \
    i_method    (X,Y, string, filename) \
    i_method    (X,Y, path,   absolute) \
    i_method    (X,Y, path,   parent) \
    i_method    (X,Y, A,      read, AType) \
    i_method    (X,Y, path,   change_ext, cstr) \
    s_method    (X,Y, path,   cwd, sz) \
    i_override_m(X,Y, u64,    hash) \
    i_override_ctr(X,Y, cereal) \
    i_construct(    X,Y, cstr, sz) \
    i_cast(      X,Y, cstr) \
    i_override_cast(X,Y, string)
declare_class(path)

#define array_schema(X,Y) \
    i_intern         (X,Y, A*,   elements) \
    i_intern         (X,Y, i32,  alloc) \
    i_intern         (X,Y, i32,  len) \
    s_method_vargs   (X,Y, X,    of, A) \
    i_method         (X,Y, A,    first) \
    i_method         (X,Y, A,    last) \
    i_method         (X,Y, X,    pop) \
    i_method         (X,Y, X,    remove, num) \
    i_method         (X,Y, X,    remove_weak, num) \
    i_method         (X,Y, A,    push,A) \
    i_method         (X,Y, A,    push_weak,A) \
    i_method         (X,Y, A,    get, i32) \
    i_method         (X,Y, num,  count) \
    i_method         (X,Y, num,  index_of, A) \
    i_operator       (X,Y, none, assign_add, A) \
    i_operator       (X,Y, none, assign_sub, num) \
    i_method_vargs   (X,Y, none, push_symbols, X, cstr) \
    i_method_vargs   (X,Y, none, push_objects, X, A) \
    i_construct      (X,Y,       sz) \
    i_index          (X,Y, A,    num) \
    i_override_cast  (X,Y, bool)
declare_class(array)

declare_meta(array, ATypes)

#define AF_schema(X,Y) \
    i_intern(    X,Y, array, pool) \
    i_public(    X,Y, sz,    start_size) \
    s_method(    X,Y, AF,    fetch, num) \
    s_method(    X,Y, AF,    create, sz) \
    i_override_m(X,Y, none,  init) \
    i_override_m(X,Y, none,  destructor)
declare_class(AF)

#define hashmap_schema(X,Y) \
    i_intern         (X,Y, list,  data) \
    i_private        (X,Y, num,   alloc) \
    i_private        (X,Y, num,   count) \
    i_method         (X,Y, none,  remove, A) \
    i_method         (X,Y, none,  set, A, A) \
    i_method         (X,Y, A,     get, A) \
    i_method         (X,Y, item,  fetch, A) \
    i_method         (X,Y, item,  lookup, A) \
    i_method         (X,Y, bool,  contains, A) \
    i_override_cast  (X,Y, string) \
    i_construct      (X,Y,        sz) \
    i_index          (X,Y, A,     A) \
    i_override_cast  (X,Y, bool)
declare_class(hashmap)

#define map_item_schema(X,Y) \
    i_intern         (X,Y, item,    ref) \
    i_intern         (X,Y, A,       key) \
    i_intern         (X,Y, A,       val)
declare_class(map_item)

/// hmap stores the item, and our refs list has a value that holds that (origin = hmap)
#define map_schema(X,Y) \
    i_intern         (X,Y, hashmap, hmap) \
    i_intern         (X,Y, sz,      hsize) \
    i_method         (X,Y, none,    set,        A, A) \
    i_override_m     (X,Y, A,       get) \
    i_method         (X,Y, A,       fetch,      A) \
    i_method         (X,Y, bool,    contains,   A) \
    i_override_m     (X,Y, none,    init) \
    i_override_cast  (X,Y, string) \
    i_construct      (X,Y, sz) \
    i_index          (X,Y, A, A) \
    i_override_cast  (X,Y, bool)
declare_mod(map, list)

/// how beneficial is it to have args in 'context' structure?
/// we have a place for holding references
/// no need to have temporary arg variables we pass in
/// it could be significantly faster
/// its compatible with lambdas; those args are just set first

#define fn_schema(X,Y) \
    i_intern    (X,Y, method_t*, method) \
    i_intern    (X,Y, A,         target) \
    i_intern    (X,Y, A,         context) \
    i_method    (X,Y, A,         call, array) \
    i_construct (X,Y,            Member, A, A) \
    i_override_m(X,Y, u64,       hash)
declare_class(fn)

#define string_schema(X,Y) \
    i_intern(X,Y,     cstr,    chars) \
    i_intern(X,Y,     num,     alloc) \
    i_intern(X,Y,     num,     len) \
    i_intern(X,Y,     u64,     h) \
    i_method(X,Y,     array,   split, cstr) \
    i_method(X,Y,     num,     index_of, cstr) \
    i_method(X,Y,     none,    append, cstr) \
    i_method(X,Y,     string,  mid, num, num) \
    i_method(X,Y,     none,    reserve, num) \
    i_method(X,Y,     none,    write, handle, bool) \
    i_method(X,Y,     bool,    has_suffix, cstr) \
    i_method(X,Y,     num,     cmp, cstr) \
    i_method(X,Y,     bool,    eq,  cstr) \
    i_construct(X,Y,  sz) \
    i_construct(X,Y,  cstr, num) \
    i_override_m(X,Y, u64, hash) \
    i_override_m(X,Y, num, compare) \
    i_override_cast(X,Y, bool) \
    i_cast(X,Y,       cstr) \
    i_cast(X,Y,       sz) \
    i_cast(X,Y,       path) \
    i_index(X,Y, i32, num)
declare_class(string)

#define vector_schema(X,Y) \
    i_method(X,Y,     A,    pop) \
    i_method(X,Y,     A,    push,     A) \
    i_method(X,Y,     A,    get,      i32) \
    i_method(X,Y,     num,  count) \
    i_override_m(X,Y, i32,  compare) \
    i_override_m(X,Y, u64,  hash) \
    i_override_cast(X,Y, bool)
declare_class(vector)

/// use %o to print objects, or % others -- octet is not a use-case we serve (use base-16 for that)
object A_formatter(AType rtype, FILE* f, bool write_ln, cstr template, ...);

#define Exists_schema(X,Y) \
    enum_value(X,Y, no) \
    enum_value(X,Y, file) \
    enum_value(X,Y, dir)
declare_enum(Exists)

#define         form(T, t, ...)   A_formatter(typeid(T), null,   false, t, ## __VA_ARGS__)
#define       format(t, ...)      A_formatter(null,      null,   false, t, ## __VA_ARGS__)
#define        print(t,    ...)   A_formatter(null,      stdout, true,  t, ## __VA_ARGS__)
#define        error(t, ...)      A_formatter(null,      stderr, true,  t, ## __VA_ARGS__)
#define        fault(t, ...) do { A_formatter(null,      stderr, true,  t, ## __VA_ARGS__); exit(1); } while(0)
#define  file_exists(t, ...)     (A_exists(A_formatter(null, null, false, t, ## __VA_ARGS__)) == Exists_file)
#define   dir_exists(t, ...)     (A_exists(A_formatter(null, null, false, t, ## __VA_ARGS__)) == Exists_dir)
#define       assert(a, t, ...) do { if (!(a)) { A_formatter(null, stderr, true,  t, ## __VA_ARGS__); exit(1); } } while(0)

/// we can iterate through a collection with this strange code
#define each(T, t, E, e) \
    if (M(T, count, t)) for (E e = M(T, get, t, 0), e0 = 0; e0 == 0; e0++) \
        for (num __i = 0, __len = M(T, count, t); __i < __len; __i++, e = M(T, get, t, __i)) \

/// we can go through a map
#define enumerate(MM, EE) \
    if (MM && cast(MM, bool)) for (item _i = MM->first, EE = null; _i; _i = _i->next) \
        for (map_item EE = (map_item)_i->val, e0 = EE; EE == e0; e0++) \

/// possible to iterate safely through primitives
#define primitives(T, t, E, e) \
    if (M(T, count, t)) for (E e = *(E*)M(T, get, t, 0), e0 = 0; e0 == 0; e0++) \
        for (num i = 0, __len = M(T, count, t); i < __len; i++, e = *(E*)M(T, get, t, i)) \

A           A_alloc(AType type, num count, bool af_pool);

/// we are not registering struct types because we have no idea of membership
/// however we may allocate based on their size
#define A_struct(T) A_alloc(typeid(u8), sizeof(T), true)

A           A_new(AType type);
A           A_construct(AType type, int n_args, ...);
A           A_initialize(A a); /// called after 'construction' ... this is so we do something generic in init, and support named args
A           A_convert(AType type, A input);
type_member_t* A_constructor(AType type, AType first_arg); // find a constructor method (used for dynamic construction)
bool        A_inherits(A left, AType type); // would be nice to actually allow typeid vs typeid here
A           A_hold(A a);
void        A_drop(A a);
sz          len(A a);
num         index_of_cstr(A a, cstr f);
Exists      A_exists(A a);

#define     drop(a) A_drop(a)
#define     hold(a) A_hold(a)


/// should be adapted to work with schemas 
/// what a weird thing it would be to have map access to properties
/// everything should be A-based, and forget about the argument hacks?

map         A_args(int argc, symbol argv[], map default_values, object default_key);
AF          A_pool(sz size);
void        A_free(A a);
A_f**       A_types(num* length);
type_member_t* A_member(AType type, enum A_TYPE member_type, char* name);
A           A_method_call(method_t* a, array args);
A           A_method(AType type, char* method_name, array args);
A           A_method_vargs(A instance, cstr method_name, int n_args, ...);
fn          A_lambda(A target, type_member_t* member, A context);
A           A_call(A instance, type_member_t* member, array args);
A           A_primitive(AType type, void* data);
A           A_enum(AType enum_type, i32 val);
A           A_i8(i8);
A           A_u8(u8);
A           A_i16(i16);
A           A_u16(u16);
A           A_i32(i32);
A           A_u32(u32);
A           A_i64(i64);
A           A_u64(u64);
A           A_f32(f32);
A           A_f64(f64);
A           A_cstr(cstr);
A           A_none();
A           A_bool(bool);
A           A_realloc(A, num);
void        A_push(A, A);
void        A_start();
A           A_fields(A instance);
A           A_data(A instance);
bool      is_meta(A a);
bool      is_meta_compatible(A a, A b);

bool create_symlink(path target, path link);

/// todo: auto-release, no use of drop in most places
/// push_weak is probably a reasonable idea for array
array array_of(AType validate, ...);
void  array_weak_push(array, A);

#endif