#ifndef _A_TYPE_
#define _A_TYPE_

typedef struct A_f* AType;

struct type_member_t;
struct array;
struct A_f;


/// our A-type classes have many types of methods
/// constructor, i[nstance]-method, s[tatic]-method, operator (these are enumerable!), and index.  we index by 1 argument only in C but we may allow for more in silver
enum A_TYPE {
    A_TYPE_NONE      = 0,
    A_TYPE_CONSTRUCT = 1,
    A_TYPE_PROP      = 2,
    A_TYPE_PRIV      = 4,
    A_TYPE_INTERN    = 8,
    A_TYPE_IMETHOD   = 16,
    A_TYPE_SMETHOD   = 32,
    A_TYPE_OPERATOR  = 64,
    A_TYPE_CAST      = 128,
    A_TYPE_INDEX     = 256,
    A_TYPE_ENUMV     = 512,
    A_TYPE_OVERRIDE  = 1024 /// being explicit with this is important, because we only infer by memory checks otherwise
};                          /// its not that its annoying to write its just more important for the override to be a real member with reference

enum A_TRAIT {
    A_TRAIT_PRIMITIVE = 1,
    A_TRAIT_INTEGRAL  = 2,
    A_TRAIT_REALISTIC = 4,
    A_TRAIT_SIGNED    = 8,
    A_TRAIT_UNSIGNED  = 16,
    A_TRAIT_ENUM      = 32,
    A_TRAIT_ALIAS     = 64,
    A_TRAIT_ABSTRACT  = 128
};

_Pragma("pack(push, 1)")

typedef struct meta_t {
    long long       count;
    AType           meta_0, meta_1, meta_2, meta_3, 
                    meta_4, meta_5, meta_6, meta_7, meta_8, meta_9;
} meta_t;

typedef struct ftable_t {
    struct ftable_t* parent_type;
    char*           name;
    char*           module;
    int             size;
    int             member_count;
    struct type_member_t* members;
    int             traits;
    AType           src;
    void*           arb;
    meta_t          meta;
} ftable_t;

typedef struct type_member_t {
    char*           name;
    AType           type;
    int             offset;
    int             member_type;
    int             operator_type;
    int             required;
    meta_t          args;
    void*           ptr;
    void*           method;
} type_member_t;

_Pragma("pack(pop)")

#endif